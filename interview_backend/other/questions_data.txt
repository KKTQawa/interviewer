RESTful API是一种基于HTTP协议的架构风格，其核心是资源导向和无状态通信.在经典的前端开发中有独到的技术优势：前后端分离、跨平台兼容、缓存友好，在实际中实际GitHub API、Twitter API均采用RESTful设计。
其核心思想是对象不再自行创建依赖项，而是由外部容器（如Spring IoC）注入，有构造器注入、Setter注入、字段注入三种典型注入方式，具有解耦与可测试性、配置灵活性、生命周期管理、面向接口编程、促进模块化五大优势。
信号词QShh
HTTP：数据以明文传输，容易被窃听、篡改或中间人攻击，不安全。默认使用 80 端口,工作在应用层。适用于不敏感信息的传输（如静态网页）。HTTPS：通过 SSL/TLS 协议 加密数据，确保传输的机密性、完整性和身份验证，更安全。默认使用 443 端口。在应用层和传输层之间加入 SSL/TLS 加密层。需要由 CA（证书颁发机构） 签发的数字证书，以验证服务器身份（部分自签名证书可用于测试）。加密/解密过程会略微增加延迟（现代硬件优化后影响已很小）。必需用于涉及隐私的场景（登录、支付、API 通信等）。